{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","prevState","score","topScore","newState","this","props","setState","className","onAnimationEnd","Component","Nav","href","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","image","shake","Game","data","handleCorrectGuess","newData","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2fe2c4e8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\"\n\nclass NavMessage extends Component {\n    state = {\n        message: \"\",\n        animating: false\n    }\n\n    componentDidUpdate({ score, topScore }, prevState) {\n      const newState = { animating: true};\n\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score === 0 && topScore > 0) {\n        newState.message = \"incorrect\";\n      } else {\n        newState.message = \"correct\";\n      }\n\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n    }\n\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n        default:\n          return \"Click an image to begin!\";\n        }\n      };\n    \n      render() {\n        return (\n          <li\n            className={this.state.animating ? this.state.message : \"\"}\n            onAnimationEnd={() => this.setState({ animating: false })}\n          >\n            {this.renderMessage()}\n          </li>\n        );\n      }\n}\n\nexport default NavMessage;","import React from \"react\";\nimport NavMessage from \"../NavMessage\";\nimport \"./style.css\";\n\n// Component for the Navbar\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        <NavMessage score={props.score} topScore={props.topScore} />\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h1>Clicky Game!</h1>\n            <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\nreturn <main className=\"container\">{props.children}</main>\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n    return (\n        <div\n          role=\"img\"\n          aria-label=\"click item\"\n          onClick={() => props.handleClick(props.id)}\n          style={{backgroundImage: `url(\"${props.image}\")`}}\n          className={`click-item${props.shake ? \" shake\" : \"\"}`}\n        />\n    );\n}\n\nexport default ClickItem;","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\"\nimport Container from \"../Container\"\nimport ClickItem from \"../ClickItem\";\nimport data from \"../../characters.json\"\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0\n    }\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleData(this.state.data)});\n    }\n\n    handleCorrectGuess = newData => {\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = Math.max(newScore, topScore);\n\n        this.setState({\n            data: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        });\n    };\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data: this.resetData(data),\n            score: 0\n        });\n    };\n\n    resetData = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false}));\n        return this.shuffleData(resetData);\n    };\n\n    shuffleData = data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    };\n\n    handleItemClick = id => {\n        let guessedCorrectly = false;\n        const newData = this.state.data.map(item => {\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newItem;\n        });\n        guessedCorrectly\n        ? this.handleCorrectGuess(newData)\n        : this.handleIncorrectGuess(newData);\n    }\n\n    render() {\n        return (\n            <div>\n                <Nav score={this.state.score} topScore={this.state.topScore}/>\n                <Header/>\n                <Container>\n                    {this.state.data.map(item => (\n                        <ClickItem\n                          key={item.id}\n                          id={item.id}\n                          shake={!this.state.score && this.state.topScore}\n                          handleClick={this.handleItemClick}\n                          image={item.image}\n                        />\n                    ))}\n                </Container>\n\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return <Game />\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}